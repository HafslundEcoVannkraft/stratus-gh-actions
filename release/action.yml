name: "Simple Version Bump and Release"
description: "Bumps version based on PR labels, creates tags, and generates GitHub releases with native release notes"

inputs:
  # Release Configuration
  draft:
    description: "Create release as draft"
    required: false
    default: "false"
  prerelease:
    description: "Mark as pre-release"
    required: false
    default: "false"

outputs:
  new_version:
    description: "Generated semantic version number (e.g., v1.2.3)"
    value: ${{ steps.version.outputs.new_version }}
  previous_version:
    description: "Previous version for comparison (e.g., v1.2.2)"
    value: ${{ steps.version.outputs.previous_version }}
  bump_type:
    description: "Version increment type: major, minor, or patch"
    value: ${{ steps.version.outputs.bump_type }}
  release_url:
    description: "URL of the created release"
    value: ${{ steps.release.outputs.release_url }}

runs:
  using: "composite"
  steps:
    - name: Determine Version
      id: version
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -e

        # Get all tags and find the latest semantic version
        echo "Fetching all tags to determine latest version..."
        all_tags=$(git tag -l "v*")

        # Initialize with default
        latest_tag="v0.0.0"
        latest_major=0
        latest_minor=0
        latest_patch=0

        # Process all tags to find the latest semantic version
        for tag in $all_tags; do
          # Skip 'latest' tag
          if [[ "$tag" == "latest" ]]; then
            continue
          fi

          # Extract version components with validation
          if [[ "$tag" =~ ^v([0-9]+)$ ]]; then
            # Major version only (v1, v2, etc.)
            tag_major="${BASH_REMATCH[1]}"
            tag_minor=0
            tag_patch=0
          elif [[ "$tag" =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
            # Major.Minor version (v1.2, v2.0, etc.)
            tag_major="${BASH_REMATCH[1]}"
            tag_minor="${BASH_REMATCH[2]}"
            tag_patch=0
          elif [[ "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+).*$ ]]; then
            # Full semantic version (v1.2.3, v2.0.1-beta, etc.)
            tag_major="${BASH_REMATCH[1]}"
            tag_minor="${BASH_REMATCH[2]}"
            tag_patch="${BASH_REMATCH[3]}"
          else
            # Tag doesn't match expected format, skip it
            echo "Skipping tag with non-semantic format: $tag"
            continue
          fi

          # Compare versions and update if this one is newer
          if [[ "$tag_major" -gt "$latest_major" ]] ||
             [[ "$tag_major" -eq "$latest_major" && "$tag_minor" -gt "$latest_minor" ]] ||
             [[ "$tag_major" -eq "$latest_major" && "$tag_minor" -eq "$latest_minor" && "$tag_patch" -gt "$latest_patch" ]]; then
            latest_tag="$tag"
            latest_major="$tag_major"
            latest_minor="$tag_minor"
            latest_patch="$tag_patch"
          fi
        done

        echo "Latest semantic version tag: $latest_tag"

        # Set variables for version calculation
        major="$latest_major"
        minor="$latest_minor"
        patch="$latest_patch"

        # Get PR labels for pull request events
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          pr_labels="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          echo "PR labels: $pr_labels"
        else
          # For push events, check the commit message
          commit_message=$(git log -1 --pretty=%B | tr '[:upper:]' '[:lower:]')
          echo "Last commit message: $commit_message"
          pr_labels=""
        fi

        # Determine version bump based on labels or commit message
        bump_type=""

        # Check PR labels first (for PR events)
        if [[ -n "$pr_labels" ]]; then
          if [[ "$pr_labels" == *"breaking-change"* ]] || [[ "$pr_labels" == *"major"* ]]; then
            bump_type="major"
          elif [[ "$pr_labels" == *"enhancement"* ]] || [[ "$pr_labels" == *"feature"* ]] || [[ "$pr_labels" == *"minor"* ]]; then
            bump_type="minor"
          else
            bump_type="patch"
          fi
        else
          # Fall back to commit message parsing (for push events)
          if [[ "$commit_message" == *"breaking change:"* ]] || [[ "$commit_message" == *"major:"* ]]; then
            bump_type="major"
          elif [[ "$commit_message" == *"feat:"* ]] || [[ "$commit_message" == *"minor:"* ]]; then
            bump_type="minor"
          elif [[ "$commit_message" == *"fix:"* ]] || [[ "$commit_message" == *"patch:"* ]]; then
            bump_type="patch"
          else
            bump_type="patch"  # Default to patch
          fi
        fi

        # Calculate new version
        if [[ "$bump_type" == "major" ]]; then
          new_version="v$((major + 1)).0.0"
        elif [[ "$bump_type" == "minor" ]]; then
          new_version="v${major}.$((minor + 1)).0"
        else
          new_version="v${major}.${minor}.$((patch + 1))"
        fi

        echo "New version: $new_version (${bump_type} bump)"

        # Output values
        echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
        echo "previous_version=$latest_tag" >> "$GITHUB_OUTPUT"
        echo "bump_type=$bump_type" >> "$GITHUB_OUTPUT"
        echo "major=$major" >> "$GITHUB_OUTPUT"

    - name: Create Tags
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # Create a new tag for the new version
        git tag -a "${{ steps.version.outputs.new_version }}" -m "Release ${{ steps.version.outputs.new_version }}"
        git push origin "${{ steps.version.outputs.new_version }}"

        # Force update the major version tag to point to the current commit
        if [[ "${{ steps.version.outputs.major }}" -gt 0 ]]; then
          # Extract the major version from the new version (more reliably)
          new_major=$(echo "${{ steps.version.outputs.new_version }}" | sed 's/^v//' | cut -d. -f1)

          # Create or update the major version tag
          git tag -f "v${new_major}"
          git push origin "v${new_major}" --force
        fi

        # Create or update the 'latest' tag to always point to the most recent release
        git tag -f "latest"
        git push origin "latest" --force

    - name: Create Release
      id: release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.version.outputs.new_version }}',
            name: '${{ steps.version.outputs.new_version }}',
            draft: ${{ inputs.draft }},
            prerelease: ${{ inputs.prerelease }},
            target_commitish: context.sha,
            generate_release_notes: true  // Use GitHub's native release notes
          });

          console.log(`Created release: ${release.html_url}`);
          core.setOutput('release_url', release.html_url);

          // Comment on PR if this is a PR event
          if (context.eventName === 'pull_request' && context.payload.pull_request) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ðŸš€ Released version ${{ steps.version.outputs.new_version }}!\n\nView the release: ${release.html_url}`
            });
          }
