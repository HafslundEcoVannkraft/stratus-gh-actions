name: Build and Deploy Apps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_all:
        description: 'Build all apps regardless of changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  analyze:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.scope.outputs.matrix }}
      all_apps: ${{ steps.scope.outputs.all_apps }}
      has_changes: ${{ steps.scope.outputs.has_changes }}
      has_deletions: ${{ steps.scope.outputs.has_deletions }}
      deleted_apps: ${{ steps.scope.outputs.deleted_apps }}
      deleted_containers: ${{ steps.scope.outputs.deleted_containers }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes
        id: scope
        uses: ./build-scope-analyzer  # or: HafslundEcoVannkraft/stratus-gh-actions/build-scope-analyzer@main
        with:
          root-path: ${{ github.workspace }}
          include-pattern: 'apps/*'
          # Optional: exclude-pattern: 'tests/*'
          require-app-config: 'true'  # For Container Apps mode

  build-apps:
    name: Build ${{ matrix.app_name }}
    needs: analyze
    if: |
      (github.event_name != 'workflow_dispatch' && needs.analyze.outputs.has_changes == 'true') ||
      (github.event_name == 'workflow_dispatch' && inputs.build_all == true)
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ github.event_name == 'workflow_dispatch' && inputs.build_all == true && fromJson(needs.analyze.outputs.all_apps) || fromJson(needs.analyze.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        if: matrix.dockerfiles != '[]'
        run: |
          echo "Building Docker images for ${{ matrix.app_name }}"
          echo "Dockerfiles: ${{ toJson(matrix.dockerfiles) }}"
          
          # Example: Build each Dockerfile
          # for dockerfile in ${{ matrix.dockerfiles }}; do
          #   docker build -f $dockerfile.path -t ${{ matrix.app_name }}-$dockerfile.suffix .
          # done

      - name: Deploy Container App
        if: matrix.app_config != null
        run: |
          echo "Deploying ${{ matrix.app_name }} with config: ${{ matrix.app_config }}"
          # Add your deployment logic here

  cleanup-deleted-apps:
    name: Cleanup Deleted Apps
    needs: analyze
    if: needs.analyze.outputs.deleted_apps != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.analyze.outputs.deleted_apps) }}
    steps:
      - name: Destroy Container App
        run: |
          echo "Destroying app: ${{ matrix.app.app_name }}"
          echo "Path: ${{ matrix.app.path }}"
          echo "Deletion reason: ${{ matrix.app.deleted_config }}"
          
          # Add your cleanup logic here, e.g.:
          # - Terraform destroy
          # - Azure CLI commands to delete Container App
          # - Remove from any service registries

  cleanup-deleted-containers:
    name: Cleanup Deleted Container Images
    needs: analyze
    if: needs.analyze.outputs.deleted_containers != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: ${{ fromJson(needs.analyze.outputs.deleted_containers) }}
    steps:
      - name: Delete from Container Registry
        run: |
          echo "Deleting container image: ${{ matrix.container.image_name }}"
          echo "From app: ${{ matrix.container.app_name }}"
          echo "Original Dockerfile: ${{ matrix.container.dockerfile }}"
          
          # Add your ACR cleanup logic here, e.g.:
          # az acr repository delete --name myregistry --image ${{ matrix.container.image_name }} --yes

  summary:
    name: Summary
    needs: [analyze, build-apps, cleanup-deleted-apps, cleanup-deleted-containers]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Print Summary
        run: |
          echo "## Build Scope Analysis Summary"
          echo "- Changes detected: ${{ needs.analyze.outputs.has_changes }}"
          echo "- Deletions detected: ${{ needs.analyze.outputs.has_deletions }}"
          echo "- Apps built: ${{ needs.build-apps.result == 'success' && 'Yes' || 'No' }}"
          echo "- Cleanup performed: ${{ (needs.cleanup-deleted-apps.result == 'success' || needs.cleanup-deleted-containers.result == 'success') && 'Yes' || 'No' }}" 