name: Pre-Merge Version Check

on:
  pull_request:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  pre-merge-version:
    name: Check Next Semantic Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Preview Next Version
        id: version
        uses: ./release
        with:
          dry-run: true
      - name: Comment Next Version on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION || '${{ steps.version.outputs.new_version }}';
            const body = `ðŸ”¢ If merged now, the next release version will be: **${version}**\n\nThe action.yml and pyproject.toml have been updated in this PR branch.`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
      - name: Update action.yml and pyproject.toml with next version
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          # Remove leading 'v' if present for pyproject.toml
          VERSION_NO_V=${VERSION#v}
          sed -i "s|image: \"docker://ghcr.io/hafslundecoVannkraft/stratus-gh-actions/build-scope-analyzer:.*\"|image: \"docker://ghcr.io/hafslundecoVannkraft/stratus-gh-actions/build-scope-analyzer:${VERSION}\"|" build-scope-analyzer/action.yml
          sed -i "s/^version = \".*\"/version = \"${VERSION_NO_V}\"/" build-scope-analyzer/pyproject.toml
          if git diff --exit-code > /dev/null; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub App JWT and Installation Access Token
        if: steps.version.outputs.changed == 'true'
        id: jwt
        env:
          STRATUS_GA_BOT_PEM: ${{ secrets.STRATUS_GA_BOT_PEM }}
          STRATUS_GA_BOT_ID: ${{ vars.STRATUS_GA_BOT_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          # Install jq and openssl if not present
          sudo apt-get update && sudo apt-get install -y jq

          # Write PEM to file
          echo "$STRATUS_GA_BOT_PEM" > private-key.pem

          # Generate JWT
          now=$(date +%s)
          exp=$((now + 540))
          header='{"alg":"RS256","typ":"JWT"}'
          payload="{\"iat\":$now,\"exp\":$exp,\"iss\":\"$STRATUS_GA_BOT_ID\"}"
          base64url() { openssl base64 -e -A | tr '+/' '-_' | tr -d '='; }
          header_b64=$(echo -n "$header" | base64url)
          payload_b64=$(echo -n "$payload" | base64url)
          unsigned_token="$header_b64.$payload_b64"
          signature=$(echo -n "$unsigned_token" | openssl dgst -sha256 -sign private-key.pem | base64url)
          jwt="$unsigned_token.$signature"

          # Get installation ID
          installation_id=$(curl -s -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/installation | jq -r .id)

          # Get installation access token
          access_token=$(curl -s -X POST -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/$installation_id/access_tokens | jq -r .token)

          echo "strauts_ga_bot_installation_token=$access_token" >> $GITHUB_OUTPUT

          rm private-key.pem
      - name: Commit and push version bump via API
        if: steps.version.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.jwt.outputs.strauts_ga_bot_installation_token }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get current branch info
            const branch = context.payload.pull_request.head.ref;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const version = '${{ steps.version.outputs.new_version }}';

            console.log(`Updating files on branch: ${branch}`);

            try {
              // Get current commit SHA of the branch
              const branchRef = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${branch}`
              });

              const currentCommitSha = branchRef.data.object.sha;

              // Get current tree
              const currentCommit = await github.rest.git.getCommit({
                owner,
                repo,
                commit_sha: currentCommitSha
              });

              // Read updated files
              const actionYmlContent = fs.readFileSync('build-scope-analyzer/action.yml', 'utf8');
              const pyprojectTomlContent = fs.readFileSync('build-scope-analyzer/pyproject.toml', 'utf8');

              // Create blobs for the updated files
              const actionYmlBlob = await github.rest.git.createBlob({
                owner,
                repo,
                content: Buffer.from(actionYmlContent).toString('base64'),
                encoding: 'base64'
              });

              const pyprojectTomlBlob = await github.rest.git.createBlob({
                owner,
                repo,
                content: Buffer.from(pyprojectTomlContent).toString('base64'),
                encoding: 'base64'
              });

              // Create new tree with updated files
              const newTree = await github.rest.git.createTree({
                owner,
                repo,
                base_tree: currentCommit.data.tree.sha,
                tree: [
                  {
                    path: 'build-scope-analyzer/action.yml',
                    mode: '100644',
                    type: 'blob',
                    sha: actionYmlBlob.data.sha
                  },
                  {
                    path: 'build-scope-analyzer/pyproject.toml',
                    mode: '100644',
                    type: 'blob',
                    sha: pyprojectTomlBlob.data.sha
                  }
                ]
              });

              // Create new commit
              const newCommit = await github.rest.git.createCommit({
                owner,
                repo,
                message: `chore: bump version to ${version} [pre-merge]`,
                tree: newTree.data.sha,
                parents: [currentCommitSha]
              });

              // Update branch reference
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${branch}`,
                sha: newCommit.data.sha
              });

              console.log(`Successfully updated branch ${branch} with new commit: ${newCommit.data.sha}`);

            } catch (error) {
              console.error('Error updating files via API:', error);
              throw error;
            }

    # Require this job to pass before merging (set branch protection in GitHub UI)
