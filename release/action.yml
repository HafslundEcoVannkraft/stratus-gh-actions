name: "Simple Version Bump and Release"
description: "Bumps version based on PR labels, creates tags, and generates GitHub releases with native release notes"

inputs:
  # Release Configuration
  draft:
    description: "Create release as draft"
    required: false
    default: "false"
  prerelease:
    description: "Mark as pre-release"
    required: false
    default: "false"
  
outputs:
  new_version:
    description: "Generated semantic version number (e.g., v1.2.3)"
    value: ${{ steps.version.outputs.new_version }}
  previous_version:
    description: "Previous version for comparison (e.g., v1.2.2)"
    value: ${{ steps.version.outputs.previous_version }}
  bump_type:
    description: "Version increment type: major, minor, or patch"
    value: ${{ steps.version.outputs.bump_type }}
  release_url:
    description: "URL of the created release"
    value: ${{ steps.release.outputs.release_url }}

runs:  
  using: "composite"  
  steps:
    - name: Determine Version
      id: version
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        set -e
        
        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        
        # Extract version numbers
        major=$(echo $latest_tag | sed 's/v//' | cut -d. -f1)
        minor=$(echo $latest_tag | cut -d. -f2)
        patch=$(echo $latest_tag | cut -d. -f3 | cut -d- -f1)
        
        # Get PR labels for pull request events
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          pr_labels="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          echo "PR labels: $pr_labels"
        else
          # For push events, check the commit message
          commit_message=$(git log -1 --pretty=%B | tr '[:upper:]' '[:lower:]')
          echo "Last commit message: $commit_message"
          pr_labels=""
        fi
        
        # Determine version bump based on labels or commit message
        bump_type=""
        
        # Check PR labels first (for PR events)
        if [[ -n "$pr_labels" ]]; then
          if [[ "$pr_labels" == *"breaking-change"* ]] || [[ "$pr_labels" == *"major"* ]]; then
            bump_type="major"
          elif [[ "$pr_labels" == *"enhancement"* ]] || [[ "$pr_labels" == *"feature"* ]] || [[ "$pr_labels" == *"minor"* ]]; then
            bump_type="minor"
          else
            bump_type="patch"
          fi
        else
          # Fall back to commit message parsing (for push events)
          if [[ "$commit_message" == *"breaking change:"* ]] || [[ "$commit_message" == *"major:"* ]]; then
            bump_type="major"
          elif [[ "$commit_message" == *"feat:"* ]] || [[ "$commit_message" == *"minor:"* ]]; then
            bump_type="minor"
          elif [[ "$commit_message" == *"fix:"* ]] || [[ "$commit_message" == *"patch:"* ]]; then
            bump_type="patch"
          else
            bump_type="patch"  # Default to patch
          fi
        fi
        
        # Calculate new version
        if [[ "$bump_type" == "major" ]]; then
          new_version="v$((major + 1)).0.0"
        elif [[ "$bump_type" == "minor" ]]; then
          new_version="v${major}.$((minor + 1)).0"
        else
          new_version="v${major}.${minor}.$((patch + 1))"
        fi
        
        echo "New version: $new_version (${bump_type} bump)"
        
        # Output values
        echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
        echo "previous_version=$latest_tag" >> "$GITHUB_OUTPUT"
        echo "bump_type=$bump_type" >> "$GITHUB_OUTPUT"

    - name: Create Tag
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "${{ steps.version.outputs.new_version }}" -m "Release ${{ steps.version.outputs.new_version }}"
        git push origin "${{ steps.version.outputs.new_version }}"

    - name: Create Release
      id: release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.version.outputs.new_version }}',
            name: '${{ steps.version.outputs.new_version }}',
            draft: ${{ inputs.draft }},
            prerelease: ${{ inputs.prerelease }},
            target_commitish: context.sha,
            generate_release_notes: true  // Use GitHub's native release notes
          });
          
          console.log(`Created release: ${release.html_url}`);
          core.setOutput('release_url', release.html_url);
          
          // Comment on PR if this is a PR event
          if (context.eventName === 'pull_request' && context.payload.pull_request) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ðŸš€ Released version ${{ steps.version.outputs.new_version }}!\n\nView the release: ${release.html_url}`
            });
          }